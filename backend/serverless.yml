service: drilling-job-board-backend

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1  
  memorySize: 512
  stackName: drilling-job-board-backend-dev-${self:provider.stage}
  timeout: 29
  environment:
    DYNAMODB_TABLE_JOBS: ${self:service}-${self:provider.stage}-jobs
    DYNAMODB_TABLE_EMPLOYEES: ${self:service}-${self:provider.stage}-employees
    DYNAMODB_TABLE_CLIENTS: ${self:service}-${self:provider.stage}-clients
    DYNAMODB_TABLE_NOTIFICATIONS: ${self:service}-${self:provider.stage}-notifications
    JWT_SECRET: ${env:JWT_SECRET}
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    TWILIO_SENDER_PHONE_NUMBER: ${env:TWILIO_SENDER_PHONE_NUMBER}

custom:
  dotenv:
    JWT_SECRET: ${env:JWT_SECRET}
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    TWILIO_SENDER_PHONE_NUMBER: ${env:TWILIO_SENDER_PHONE_NUMBER}
  serverless-offline:
    httpPort: 5555

functions:
  register:
    handler: dist/index.register
    events:
      - http:
          path: auth/register
          method: post

  login:
    handler: dist/index.login
    events:
      - http:
          path: auth/login
          method: post

  createJob:
    handler: dist/index.createJob
    events:
      - http:
          path: jobs
          method: post
          cors: true
          authorizer:
            name: customAuthorizer
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-customAuthorizer

  updateJob:
    handler: dist/index.updateJob
    events:
      - http:
          path: /jobs/{jobId}
          method: put
          cors: true
          authorizer:
            name: customAuthorizer
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-customAuthorizer

  deleteJob:
    handler: dist/index.deleteJob
    events:
      - http:
          path: /jobs/{jobId}
          method: delete
          cors: true
          authorizer:
            name: customAuthorizer
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-customAuthorizer

  getJob:
    handler: dist/index.getJob
    events:
      - http:
          path: /jobs/{jobId}
          method: get
          cors: true
          authorizer:
            name: customAuthorizer
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-customAuthorizer

  listJobs:
    handler: dist/index.listJobs
    events:
      - http:
          path: /jobs
          method: get
          cors: true
          authorizer:
            name: customAuthorizer
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-customAuthorizer

  createEmployee:
    handler: dist/index.createEmployee
    events:
      - http:
          path: employees
          method: post
          cors: true
          authorizer:
            name: customAuthorizer
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-customAuthorizer

  createClient:
    handler: dist/index.createClient
    events:
      - http:
          path: clients
          method: post
          cors: true
          authorizer:
            name: customAuthorizer
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-customAuthorizer

  createNotification:
    handler: dist/index.createNotification
    events:
      - http:
          path: notifications
          method: post
          cors: true
          authorizer:
            name: customAuthorizer
            arn: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-customAuthorizer

package:
  individually: true
useDotenv: true
configValidationMode: error
 
plugins:
  - serverless-offline
  - serverless-dotenv-plugin
resources:
  Resources:
    JobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_JOBS}
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: S
        KeySchema:
          - AttributeName: jobId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    EmployeesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_EMPLOYEES}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CLIENTS}
        AttributeDefinitions:
          - AttributeName: clientId
            AttributeType: S
        KeySchema:
          - AttributeName: clientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_NOTIFICATIONS}
        AttributeDefinitions:
          - AttributeName: notificationId
            AttributeType: S
        KeySchema:
          - AttributeName: notificationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
